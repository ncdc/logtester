!!! 5
%html(lang="en")
  %head
    %title Hi There
    %script(src="http://code.jquery.com/jquery-1.11.0.min.js")
    %link{:href=>"//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css", :rel=>"stylesheet"}
    %script{:src=>"//netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js"}
    -#%script{:src=>"http://d3js.org/d3.v3.min.js"}
    -#%script{:src=>"rickshaw.js"}
    -#%link{:href=>"rickshaw.min.css", :rel=>"stylesheet"}
    %script{:src=>"//cdnjs.cloudflare.com/ajax/libs/flot/0.8.2/jquery.flot.min.js"}
    :css
      body { margin-top: 10px; }

      .int {
        float: left;
      }

      .tot {
        text-align: right;
      }

      .statHeader {
        text-align: center;
        border-bottom: solid 1px #ddd;
      }

      .int, .tot {
        font-size: small;
      }

      .graph {
        width: 382px;
        height: 116px;
      }

      .header {
        font-family: "HelveticaNeue-CondensedBold","Helvetica Neue","Arial Narrow",Arial,sans-serif;
        font-weight: bold;
        -webkit-font-smoothing: antialiased;
        color: #999;
      }

      .stats {
        font-family: "HelveticaNeue-CondensedBold","Helvetica Neue","Arial Narrow",Arial,sans-serif;
        font-weight: bold;
        -webkit-font-smoothing: antialiased;
        color: #999;
      }

      .stats .data {
        color: #000;
      }

      #tooltip {
        position: absolute;
        display: none;
        top: 0;
        left: 0;
        border: 1px solid #fdd;
        padding: 2px;
        background-color: #fee;
        opacity: 0.80;
      }

  %body
    #tooltip
    .container
      .row
        .col-md-2
          %form#inputs(role="form")
            .form-group
              %label(for="testLength") Test Length
              %input#testLength.form-control(name="testLength" value="5")
            .form-group
              %label(for="messageLength") Message Length
              %input#messageLength.form-control(name="messageLength" value="100")
            .form-group
              %label(for="messageRate") Messages Per Second
              %input#messageRate.form-control(name="messageRate" value="5000")
            .form-group
              %label(for="queueDepth") Logshifter Queue Depth
              %input#queueDepth.form-control(name="queueDepth" value="100")
            .form-group
              %label(for="inputBufferSize") Logshifter Input Buffer Size
              %input#inputBufferSize.form-control(name="inputBufferSize" value="2048")
            %button#go.btn.btn-default(type="button") Submit
        .col-md-8
          .row
            .col-md-3
              #logshifter.stats
                #avgReadLatency.statHeader
                  AVG READ LATENCY
                  %br/
                  .int
                    int
                    .data -
                  .tot
                    tot
                    .data -
                %p/
                #inputLines.statHeader
                  LINES IN
                  %br/
                  .int
                    int
                    .data -
                  .tot
                    tot
                    .data -
                %p/
                #inputDrops.statHeader
                  LINES DROPPED
                  %br/
                  .int
                    int
                    .data -
                  .tot
                    tot
                    .data -
                %p/
                #avgWriteDuration.statHeader
                  AVG WRITE DURATION
                  %br/
                  .int
                    int
                    .data -
                  .tot
                    tot
                    .data -
                %p/
                #outputLines.statHeader
                  LINES OUT
                  %br/
                  .int
                    int
                    .data -
                  .tot
                    tot
                    .data -
            .col-md-9
              .row
                .col-md-12
                  .header LOGSHIFTER CPU
                  #loggerCpuGraph.graph
              %p/
              .row
                .col-md-12
                  .header LOGSHIFTER RSS
                  #loggerRamGraph.graph
              %p/
              .row
                .col-md-12
                  .header RSYSLOG CPU
                  #rsyslogCpuGraph.graph
              %p/
              .row
                .col-md-12
                  .header RSYSLOG RSS
                  #rsyslogRamGraph.graph

    :coffee
      loggerCpuData = [[]]
      loggerRamData = [[]]
      rsyslogCpuData = [[]]
      rsyslogRamData = [[]]
      seriesIndex = {}
      maxDataPoints = 5


      addData = (seriesName, series, which, y) ->
        index = seriesIndex[seriesName] ||= 0
        series[which].push([index++, y])
        seriesIndex[seriesName] = index
        overage = series[which].length - maxDataPoints
        series[which].splice(0, overage) if overage > 0

      graphOptions =
        grid:
          hoverable: true
        series:
          lines:
            show: true
          points:
            show: true
        xaxis:
          show: false
        yaxis:
          min: 0

      loggerCpuGraph = $.plot($('#loggerCpuGraph'), loggerCpuData, graphOptions)
      loggerRamGraph = $.plot($('#loggerRamGraph'), loggerRamData, graphOptions)
      rsyslogCpuGraph = $.plot($('#rsyslogCpuGraph'), rsyslogCpuData, graphOptions)
      rsyslogRamGraph = $.plot($('#rsyslogRamGraph'), rsyslogRamData, graphOptions)

      updateGraph = (graph, data) ->
        graph.setData(data)
        graph.setupGrid()
        graph.draw()

      showTooltip = (x, y, contents) ->
        $('#tooltip').css(
                        top: y + 5
                        left: x + 5
                      )
                     .text(contents)
                     .fadeIn(200)

      previousPoint = null

      $('.graph').on 'plothover', (event, pos, item)->
        if item
          if previousPoint != item.dataIndex
            previousPoint = item.dataIndex
            $('#tooltip').hide()
            x = item.datapoint[0].toFixed(2)
            y = item.datapoint[1].toFixed(2)
            showTooltip(item.pageX, item.pageY, y)
        else
          $('#tooltip').hide()
          previousPoint = null

      ws = new WebSocket('ws://10.3.8.6:8000')
      ws.onmessage = (event)->
        message = JSON.parse(event.data)

        stats = message.stats

        if message.name == 'logshifter'
          if message.type == 'pidstat'
            addData('loggerCpu', loggerCpuData, 0, parseFloat(stats['total_cpu_percent']))
            updateGraph(loggerCpuGraph, loggerCpuData)

            addData('loggerRam', loggerRamData, 0, parseInt(stats['resident_set_size']))
            updateGraph(loggerRamGraph, loggerRamData)
          else if message.type == 'stats'
            $('#logshifter #avgReadLatency .int .data').text(Number(stats['InputAvgReadLatencyCurrent']).toFixed(2) + "us")
            $('#logshifter #avgReadLatency .tot .data').text(Number(stats['InputAvgReadLatencyTotal']).toFixed(2) + "us")
            ###
            $('#logshifter #avgWriteDuration .data').text(Number(stats['OutputAvgWriteDuration']).toFixed(2) + "us")
            $('#logshifter #inputLines .data').text(stats['InputLinesTotal'])
            $('#logshifter #inputDrops .data').text(stats['InputDrops'])
            $('#logshifter #outputLines .data').text(stats['OutputLinesTotal'])
            ###

        if message.name == 'rsyslog'
          addData('rsyslogCpu', rsyslogCpuData, 0, parseFloat(stats['total_cpu_percent']))
          updateGraph(rsyslogCpuGraph, rsyslogCpuData)

          addData('rsyslogRam', rsyslogRamData, 0, parseInt(stats['resident_set_size']))
          updateGraph(rsyslogRamGraph, rsyslogRamData)

      $('#go').click ->
        ws.send($('#inputs').serialize())
